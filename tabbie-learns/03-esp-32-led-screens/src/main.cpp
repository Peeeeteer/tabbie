#include <Arduino.h>


// 1. Simple chcek if the board is working

// // Define the onboard LED pin for ESP32
// #define LED_PIN 2

// void setup() {
//   // Initialize serial communication for debugging
//   Serial.begin(115200);
  
//   // Initialize the built-in LED pin as an output
//   pinMode(LED_PIN, OUTPUT);
  
//   Serial.println("ESP32 LED Blink Started");
// }

// void loop() {
//   // Turn the LED on
//   digitalWrite(LED_PIN, HIGH);
//   Serial.println("LED ON");
//   delay(500); // Wait for 1 second
  
//   // Turn the LED off
//   digitalWrite(LED_PIN, LOW);
//   Serial.println("LED OFF");
//   delay(500); // Wait for 1 second
// }



// 2. ESP32 + GME12864-11
// #include <Wire.h>
// #include <Adafruit_GFX.h>
// #include <Adafruit_SSD1306.h>

// // Display settings
// #define SCREEN_WIDTH 128
// #define SCREEN_HEIGHT 64
// #define OLED_RESET -1  // Reset pin (or -1 if sharing Arduino reset pin)
// #define SCREEN_ADDRESS 0x3C  // I2C address for the display

// // Create display object
// Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// // Function declaration
// void createStaticImage();


// void setup() {
//   Serial.begin(115200);
  
//   // Initialize I2C communication
//   Wire.begin();
  
//   // Initialize the display
//   if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
//     Serial.println(F("SSD1306 allocation failed"));
//     for(;;); // Don't proceed, loop forever
//   }
  
//   Serial.println("GME12864-11 Display initialized successfully!");
  
//   // Clear the display buffer
//   display.clearDisplay();
  
//   // Create a simple static image/scene
//   createStaticImage();
  
//   // Display the buffer content on screen
//   display.display();
// }

// void loop() {
//   // Static image - no need to update continuously
//   // You can add animations or updates here if needed
//   delay(1000);
// }



// void createStaticImage() {
//   // Clear display
//   display.clearDisplay();
  
//   // Set text color (white pixels on black background)
//   display.setTextColor(SSD1306_WHITE);
  
//   // Title text
//   display.setTextSize(2);
//   display.setCursor(15, 0);
//   display.println(F("ESP32"));
  
//   display.setTextSize(1);
//   display.setCursor(25, 20);
//   display.println(F("GME12864-11"));
  
//   // Draw a border rectangle
//   display.drawRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  
//   // Draw some geometric shapes
//   display.fillCircle(20, 45, 8, SSD1306_WHITE);  // Filled circle
//   display.drawCircle(108, 45, 8, SSD1306_WHITE); // Empty circle
  
//   // Draw a triangle
//   display.drawTriangle(50, 35, 45, 50, 55, 50, SSD1306_WHITE);
  
//   // Draw a small rectangle
//   display.fillRect(70, 40, 15, 10, SSD1306_WHITE);
  
//   // Add some status info
//   display.setTextSize(1);
//   display.setCursor(5, 55);
//   display.println(F("Status: Ready"));
// }


// // 3. ESP32 + GME12864-11 + lopaka.app
// #include <Wire.h>
// #include <Adafruit_GFX.h>
// #include <Adafruit_SSD1306.h>

// // Display settings
// #define SCREEN_WIDTH 128
// #define SCREEN_HEIGHT 64
// #define OLED_RESET -1  // Reset pin (or -1 if sharing Arduino reset pin)
// #define SCREEN_ADDRESS 0x3C  // I2C address for the display

// // Create display object
// Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// // Bitmap data for default eyes (stored in Flash memory)
// static const unsigned char PROGMEM default_image_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x80,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xc0,0x00,0x00,0x00,0x00,0x07,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xc0,0x00,0x00,0x00,0x00,0x07,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x80,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// // Bitmap data for eyes looking in different directions (same as your data)
// static const unsigned char PROGMEM eyes_direction_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x80,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xc0,0x00,0x00,0x00,0x00,0x07,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x7f,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xc0,0x00,0x00,0x00,0x00,0x07,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x80,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// // Animation timing variables
// unsigned long previousMillis = 0;
// int animationState = 0;  // 0=default initial, 1=blink, 2=default after blink, 3=look left, 4=look right, 5=default after looking

// // Function declarations for animation
// void showDefaultEyes();
// void showBlinkAnimation();
// void showEyesLeft();
// void showEyesRight();

// void setup() {
//   Serial.begin(115200);
  
//   // Initialize I2C communication
//   Wire.begin();
  
//   // Initialize the display
//   if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
//     Serial.println(F("SSD1306 allocation failed"));
//     for(;;); // Don't proceed, loop forever
//   }
  
//   Serial.println("GME12864-11 Eye Animation Started!");
  
//   // Show initial default eyes
//   showDefaultEyes();
//   previousMillis = millis();
// }

// void loop() {
//   unsigned long currentMillis = millis();
  
//   // State machine for eye animation sequence
//   switch(animationState) {
//     case 0: // Default eyes (initial) - wait 4 seconds
//       if(currentMillis - previousMillis >= 4000) {
//         animationState = 1;
//         showBlinkAnimation();
//         previousMillis = currentMillis;
//       }
//       break;
      
//     case 1: // Blink - wait 500ms then back to default
//       if(currentMillis - previousMillis >= 500) {
//         animationState = 2;
//         showDefaultEyes();
//         previousMillis = currentMillis;
//       }
//       break;
      
//     case 2: // Default eyes (after blink) - wait 1 second
//       if(currentMillis - previousMillis >= 1000) {
//         animationState = 3;
//         showEyesLeft();
//         previousMillis = currentMillis;
//       }
//       break;
      
//     case 3: // Look left - wait 1 second
//       if(currentMillis - previousMillis >= 1000) {
//         animationState = 4;
//         showEyesRight();
//         previousMillis = currentMillis;
//       }
//       break;
      
//     case 4: // Look right - wait 1 second
//       if(currentMillis - previousMillis >= 1000) {
//         animationState = 5;
//         showDefaultEyes();
//         previousMillis = currentMillis;
//       }
//       break;
      
//     case 5: // Default eyes (after looking) - wait 2 seconds then blink again
//       if(currentMillis - previousMillis >= 2000) {
//         animationState = 1;  // Go to blink, not 0
//         showBlinkAnimation();
//         previousMillis = currentMillis;
//       }
//       break;
//   }
// }

// void showDefaultEyes() {
//   display.clearDisplay();
//   display.drawBitmap(0, 0, default_image_bits, 128, 64, 1);
//   display.display();
//   Serial.println("Showing default eyes");
// }

// void showBlinkAnimation() {
//   display.clearDisplay();
//   // Draw simple rectangles for closed eyes
//   display.fillRect(22, 27, 33, 6, 1);  // Left eye closed
//   display.fillRect(73, 27, 33, 6, 1);  // Right eye closed
//   display.display();
//   Serial.println("Eyes blinking");
// }

// void showEyesLeft() {
//   display.clearDisplay();
//   display.drawBitmap(-10, 0, eyes_direction_bits, 128, 64, 1);
//   display.display();
//   Serial.println("Eyes looking left");
// }

// void showEyesRight() {
//   display.clearDisplay();
//   display.drawBitmap(18, 0, eyes_direction_bits, 128, 64, 1);
//   display.display();
//   Serial.println("Eyes looking right");
// }



// 4. ESP32 + GME12864-11 + WiFi Face Display + Default Animations
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebServer.h>
#include <Preferences.h>

// Display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1  // Reset pin (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C  // I2C address for the display

// Create display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Preferences for storing WiFi credentials
Preferences preferences;

// WiFi credentials - These will be set by build script from .env file
// DO NOT put actual credentials here - they come from .env file
#ifndef WIFI_SSID
#define WIFI_SSID "YOUR_WIFI_SSID"
#endif
#ifndef WIFI_PASSWORD
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"
#endif

const char* ssid = WIFI_SSID;
const char* password = WIFI_PASSWORD;

// Create web server on port 80
WebServer server(80);

// Face display control variables
String currentFace = "default";
bool hasFocusBitmap = false;

// Buffer for focus face bitmap data (1024 bytes for 128x64 bitmap)
uint8_t focusBitmapData[1024];

// Pomodoro session management
bool pomodoroActive = false;
unsigned long sessionStartTime = 0;
unsigned long lastDisplayChange = 0;
int displayPhase = 0; // 0=focus, 1=timer, 2=task
String currentTask = "";
const unsigned long POMODORO_DURATION = 30 * 60 * 1000; // 30 minutes in milliseconds
const unsigned long PHASE_DURATION = 60 * 1000; // 60 seconds per cycle
const unsigned long TIMER_DISPLAY_DURATION = 10 * 1000; // 10 seconds for timer
const unsigned long TASK_DISPLAY_DURATION = 10 * 1000; // 10 seconds for task

// Focus face bitmap (stored in Flash memory)
static const unsigned char PROGMEM image_WhatsApp_Image_2024_10_23_at_11_25_50_a1a4412b_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x01,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x01,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2f,0x00,0x00,0x00,0x00,0x01,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x01,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x00,0x00,0x00,0x00,0x01,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x01,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x7f,0xfe,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x18,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x38,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0xbf,0xff,0x84,0x00,0x00,0x00,0x00,0xf8,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x86,0x00,0x00,0x00,0x00,0xf8,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0xbf,0xff,0x83,0x80,0x00,0x00,0x03,0xf8,0x3f,0xfc,0x00,0x00,0x00,0x00,0x00,0xbf,0xff,0x87,0xc0,0x00,0x00,0x07,0xfc,0x3f,0xfa,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0x87,0xf0,0x00,0x00,0x1f,0xfc,0x3f,0xf8,0x00,0x00,0x00,0x00,0x00,0x5f,0xff,0x87,0xf8,0x00,0x00,0x1f,0xfc,0x7f,0xfc,0x00,0x00,0x00,0x00,0x00,0x5f,0xff,0x87,0xfc,0x00,0x00,0x7f,0xfc,0x7f,0xec,0x00,0x00,0x00,0x00,0x00,0x37,0xff,0xc7,0xfe,0x00,0x01,0xff,0xfc,0x7f,0xf4,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xcf,0xff,0x80,0x03,0xff,0xfc,0x7f,0xe8,0x00,0x00,0x00,0x00,0x00,0x37,0xff,0xcf,0xff,0x80,0x01,0xff,0xfc,0xff,0xe8,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xef,0xff,0x00,0x01,0xff,0xfe,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xfc,0x00,0x00,0x7f,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xfa,0x00,0x00,0x3f,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xe8,0x00,0x00,0x57,0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x07,0xdb,0xff,0xb4,0x00,0x00,0x2b,0xff,0xbb,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0xed,0x55,0xd0,0x00,0x00,0x1b,0x55,0xcf,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xf5,0xfe,0x60,0x00,0x00,0x0d,0xfe,0xbf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x57,0x80,0x00,0x00,0x05,0xa5,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xfe,0x00,0x00,0x00,0x01,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x16,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// Log buffer for storing recent messages
#define LOG_BUFFER_SIZE 20
String logBuffer[LOG_BUFFER_SIZE];
int logIndex = 0;
int logCount = 0;

// Function to add log message to buffer
void addLog(String message) {
  logBuffer[logIndex] = message;
  logIndex = (logIndex + 1) % LOG_BUFFER_SIZE;
  if (logCount < LOG_BUFFER_SIZE) {
    logCount++;
  }
  Serial.println(message); // Also print to serial
}

// Function to show default text face
void showDefaultFace() {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextWrap(false);
  display.setCursor(11, 27);
  display.print("Lets start a task");
  display.display();
}

// Function to show focus face from bitmap data
void showFocusFace() {
  display.clearDisplay();
  display.drawBitmap(9, 0, image_WhatsApp_Image_2024_10_23_at_11_25_50_a1a4412b_bits, 114, 64, SSD1306_WHITE);
  display.display();
}

// Function to show timer remaining
void showTimerRemaining() {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  
  // Calculate time remaining
  unsigned long elapsed = millis() - sessionStartTime;
  unsigned long remaining = POMODORO_DURATION - elapsed;
  
  if (remaining <= 0) {
    // Session ended
    pomodoroActive = false;
    showDefaultFace();
    return;
  }
  
  // Convert to minutes and seconds
  int minutes = remaining / 60000;
  int seconds = (remaining % 60000) / 1000;
  
  // Format time string
  String timeStr = String(minutes) + ":" + (seconds < 10 ? "0" : "") + String(seconds);
  
  // Center the time on screen
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(timeStr, 0, 0, &x1, &y1, &w, &h);
  int x = (SCREEN_WIDTH - w) / 2;
  int y = (SCREEN_HEIGHT - h) / 2;
  
  display.setCursor(x, y);
  display.print(timeStr);
  display.display();
}

// Function to show current task
void showCurrentTask() {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setTextWrap(true);
  
  // Center the task text
  display.setCursor(0, 20);
  display.println(currentTask);
  display.display();
}

// Function to show connection status
void showConnectionStatus() {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  
  if (WiFi.status() == WL_CONNECTED) {
    display.println("WiFi Connected!");
    display.println("IP: " + WiFi.localIP().toString());
    display.println("");
    display.println("Frontend URL:");
    display.println("http://localhost:3000");
    display.println("");
    display.println("ESP32 API:");
    display.println("http://" + WiFi.localIP().toString());
    display.println("");
    display.println("MAC: " + WiFi.macAddress());
  } else {
    display.println("WiFi Disconnected");
    display.println("");
    display.println("Check WiFi credentials");
    display.println("in .env file");
    display.println("");
    display.println("Current SSID:");
    display.println(ssid);
  }
  display.display();
}

void connectToWiFi() {
  addLog("🔄 Connecting to WiFi network: " + String(ssid));
  addLog("📊 SSID Length: " + String(strlen(ssid)) + " characters");
  
  // Configure WiFi for better stability
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  addLog("⏳ Attempting connection...");
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
    
    if (attempts % 5 == 0) {
      String statusMsg = "📡 Attempt " + String(attempts) + "/20 - Status: ";
      switch(WiFi.status()) {
        case WL_IDLE_STATUS:     statusMsg += "IDLE"; break;
        case WL_NO_SSID_AVAIL:   statusMsg += "NO_SSID_AVAILABLE"; break;
        case WL_SCAN_COMPLETED:  statusMsg += "SCAN_COMPLETED"; break;
        case WL_CONNECTED:       statusMsg += "CONNECTED"; break;
        case WL_CONNECT_FAILED:  statusMsg += "CONNECT_FAILED"; break;
        case WL_CONNECTION_LOST: statusMsg += "CONNECTION_LOST"; break;
        case WL_DISCONNECTED:    statusMsg += "DISCONNECTED"; break;
        default:                 statusMsg += "UNKNOWN(" + String(WiFi.status()) + ")"; break;
      }
      addLog(statusMsg);
    }
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    addLog("✅ WiFi Connected Successfully!");
    addLog("🌐 IP address: " + WiFi.localIP().toString());
    addLog("📡 Signal strength (RSSI): " + String(WiFi.RSSI()) + " dBm");
    addLog("🔧 MAC address: " + WiFi.macAddress());
    addLog("🏠 Gateway: " + WiFi.gatewayIP().toString());
  } else {
    Serial.println();
    addLog("❌ Failed to connect to WiFi after 20 attempts");
    addLog("🔍 Please verify:");
    addLog("  • WiFi network '" + String(ssid) + "' exists");
    addLog("  • Password is correct");
    addLog("  • ESP32 is within range");
    addLog("  • Network allows new devices");
    
    addLog("📡 Scanning for available networks...");
    int n = WiFi.scanNetworks();
    if (n == 0) {
      addLog("❌ No networks found");
    } else {
      addLog("📋 Found " + String(n) + " networks:");
      for (int i = 0; i < min(n, 5); i++) {
        String network = "  • " + WiFi.SSID(i) + " (RSSI: " + String(WiFi.RSSI(i)) + ")";
        if (WiFi.SSID(i) == String(ssid)) {
          network += " ← TARGET NETWORK FOUND!";
        }
        addLog(network);
      }
    }
  }
}

// Maintain WiFi connection with less sensitivity
void maintainWiFiConnection() {
  static unsigned long lastWiFiCheck = 0;
  static int disconnectCount = 0;
  
  // Check WiFi every 15 seconds instead of constantly
  if (millis() - lastWiFiCheck > 15000) {
    lastWiFiCheck = millis();
    
    if (WiFi.status() != WL_CONNECTED) {
      disconnectCount++;
      addLog("⚠️ WiFi disconnected (count: " + String(disconnectCount) + ")");
      
      // Only try to reconnect after 3 consecutive failures
      if (disconnectCount >= 3) {
        addLog("🔄 Attempting WiFi reconnection...");
        WiFi.reconnect();
        disconnectCount = 0; // Reset counter
        
        // Wait a bit for reconnection
        delay(2000);
      }
    } else {
      // Reset disconnect count on successful connection
      if (disconnectCount > 0) {
        addLog("✅ WiFi reconnected successfully!");
        disconnectCount = 0;
      }
    }
  }
}

// Handle Default Face request
void handleDefaultFace() {
  currentFace = "default";
  
  // Clear focus bitmap data to save memory
  hasFocusBitmap = false;
  memset(focusBitmapData, 0, sizeof(focusBitmapData));
  
  showDefaultFace();
  addLog("📝 Default text face displayed");
  addLog("🗑️ Focus bitmap data cleared to save memory");
  
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  server.send(200, "application/json", "{\"status\":\"Default face displayed\",\"face\":\"default\",\"memory_cleared\":true}");
}

// Handle Focus Face request with bitmap data
void handleFocusFace() {
  currentFace = "focus";
  
  // Check if this is a POST request with bitmap data
  if (server.method() == HTTP_POST) {
    String body = server.arg("plain");
    addLog("📦 Received bitmap data: " + String(body.length()) + " bytes");
    
    // Parse the bitmap data (expecting hex string)
    if (body.length() == 2048) { // 1024 bytes * 2 hex chars per byte
      for (int i = 0; i < 1024; i++) {
        String byteStr = body.substring(i * 2, i * 2 + 2);
        focusBitmapData[i] = (uint8_t)strtol(byteStr.c_str(), NULL, 16);
      }
      hasFocusBitmap = true;
      showFocusFace();
      addLog("🎯 Focus bitmap received and displayed");
      
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
      server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
      server.send(200, "application/json", "{\"status\":\"Focus bitmap received and displayed\",\"face\":\"focus\",\"bitmap_size\":" + String(body.length()) + "}");
    } else {
      addLog("❌ Invalid bitmap data length: " + String(body.length()) + " (expected 2048)");
      server.send(400, "application/json", "{\"error\":\"Invalid bitmap data length\",\"received\":" + String(body.length()) + ",\"expected\":2048}");
    }
  } else {
    // GET request - just show existing focus face or fallback
    showFocusFace();
    addLog("🎯 Focus bitmap displayed");
    
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
    server.send(200, "application/json", "{\"status\":\"Focus face displayed\",\"face\":\"focus\",\"has_bitmap\":" + String(hasFocusBitmap ? "true" : "false") + "}");
  }
}

// Handle Face Status request
void handleFaceStatus() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  
  String response = "{\"currentFace\":\"" + currentFace + "\",\"hasFocusBitmap\":" + String(hasFocusBitmap ? "true" : "false") + ",\"memoryUsed\":" + String(hasFocusBitmap ? 1024 : 0) + "}";
  server.send(200, "application/json", response);
}

// Handle logs request
void handleLogs() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  
  String response = "{\"logs\":[";
  
  for (int i = 0; i < logCount; i++) {
    int index = (logIndex - logCount + i + LOG_BUFFER_SIZE) % LOG_BUFFER_SIZE;
    if (i > 0) response += ",";
    response += "\"" + logBuffer[index] + "\"";
  }
  
  response += "],\"count\":" + String(logCount) + "}";
  server.send(200, "application/json", response);
}

// Handle Pomodoro session start
void handlePomodoroStart() {
  if (server.method() == HTTP_POST) {
    String body = server.arg("plain");
    addLog("🍅 Starting Pomodoro session");
    
    // Parse task name from request body
    if (body.length() > 0) {
      currentTask = body;
      addLog("📝 Task: " + currentTask);
    } else {
      currentTask = "Current Task";
    }
    
    // Start session
    pomodoroActive = true;
    sessionStartTime = millis();
    lastDisplayChange = millis();
    displayPhase = 0;
    
    // Show focus face initially
    showFocusFace();
    
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
    server.send(200, "application/json", "{\"status\":\"Pomodoro session started\",\"task\":\"" + currentTask + "\"}");
  } else {
    server.send(405, "application/json", "{\"error\":\"Method not allowed\"}");
  }
}

// Handle Pomodoro session stop
void handlePomodoroStop() {
  addLog("⏹️ Stopping Pomodoro session");
  
  pomodoroActive = false;
  currentTask = "";
  displayPhase = 0;
  
  // Show default face
  showDefaultFace();
  
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  server.send(200, "application/json", "{\"status\":\"Pomodoro session stopped\"}");
}

// Handle Pomodoro status
void handlePomodoroStatus() {
  addLog("📊 Pomodoro status requested");
  
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  
  String response = "{\"active\":" + String(pomodoroActive ? "true" : "false");
  if (pomodoroActive) {
    unsigned long elapsed = millis() - sessionStartTime;
    unsigned long remaining = POMODORO_DURATION - elapsed;
    int minutes = remaining / 60000;
    int seconds = (remaining % 60000) / 1000;
    
    response += ",\"timeRemaining\":\"" + String(minutes) + ":" + (seconds < 10 ? "0" : "") + String(seconds) + "\"";
    response += ",\"task\":\"" + currentTask + "\"";
    response += ",\"phase\":" + String(displayPhase);
  }
  response += "}";
  
  addLog("📤 Sending response: " + response);
  server.send(200, "application/json", response);
}

// Simple test endpoint
void handleTest() {
  addLog("🧪 Test endpoint called");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/plain", "ESP32 Pomodoro API is working!");
}

// Handle CORS preflight requests
void handleCORS() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  server.send(200, "text/plain", "");
}

void setup() {
  Serial.begin(115200);
  addLog("🤖 Tabbie ESP32 Face Controller starting up...");

  // Initialize I2C communication
  Wire.begin();
  
  // Initialize the display
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    addLog("❌ SSD1306 allocation failed");
    for(;;);
  }
  
  addLog("📺 GME12864-11 Display initialized successfully!");
  
  // Connect to WiFi
  connectToWiFi();

  // Setup web server routes
  server.on("/face/default", HTTP_GET, handleDefaultFace);
  server.on("/face/focus", HTTP_GET, handleFocusFace);
  server.on("/face/focus", HTTP_POST, handleFocusFace);
  server.on("/face/status", HTTP_GET, handleFaceStatus);
  server.on("/logs", HTTP_GET, handleLogs);
  
  // Pomodoro session routes
  server.on("/pomodoro/start", HTTP_POST, handlePomodoroStart);
  server.on("/pomodoro/stop", HTTP_POST, handlePomodoroStop);
  server.on("/pomodoro/status", HTTP_GET, handlePomodoroStatus);
  
  // Test route
  server.on("/test", HTTP_GET, handleTest);
  
  // CORS preflight support
  server.on("/face/default", HTTP_OPTIONS, handleCORS);
  server.on("/face/focus", HTTP_OPTIONS, handleCORS);
  server.on("/face/status", HTTP_OPTIONS, handleCORS);
  server.on("/logs", HTTP_OPTIONS, handleCORS);
  server.on("/pomodoro/start", HTTP_OPTIONS, handleCORS);
  server.on("/pomodoro/stop", HTTP_OPTIONS, handleCORS);
  server.on("/pomodoro/status", HTTP_OPTIONS, handleCORS);

  // Start the server
  server.begin();
  addLog("🌐 Web server started!");
  addLog("🎭 Face Control URLs:");
  addLog("Default: http://" + WiFi.localIP().toString() + "/face/default");
  addLog("Focus:   http://" + WiFi.localIP().toString() + "/face/focus (GET/POST)");
  addLog("Status:  http://" + WiFi.localIP().toString() + "/face/status");
  addLog("Logs:    http://" + WiFi.localIP().toString() + "/logs");
  addLog("🍅 Pomodoro URLs:");
  addLog("Start:   http://" + WiFi.localIP().toString() + "/pomodoro/start (POST)");
  addLog("Stop:    http://" + WiFi.localIP().toString() + "/pomodoro/stop (POST)");
  addLog("Status:  http://" + WiFi.localIP().toString() + "/pomodoro/status");
  
  // Show connection info on display for easy setup
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("WiFi Connected!");
  display.println("IP: " + WiFi.localIP().toString());
  display.println("");
  display.println("Frontend URL:");
  display.println("http://localhost:3000");
  display.println("");
  display.println("ESP32 API:");
  display.println("http://" + WiFi.localIP().toString());
  display.println("");
  display.println("MAC: " + WiFi.macAddress());
  display.display();
  
  // Wait a moment to show connection info, then show default face
  delay(3000);
  showDefaultFace();
}

void loop() {
  // Maintain WiFi connection (less aggressive)
  maintainWiFiConnection();
  
  // Handle web server requests
  server.handleClient();
  
  // Pomodoro display cycle management
  if (pomodoroActive) {
    unsigned long currentTime = millis();
    unsigned long elapsed = currentTime - sessionStartTime;
    
    // Check if session has ended
    if (elapsed >= POMODORO_DURATION) {
      pomodoroActive = false;
      showDefaultFace();
      addLog("⏰ Pomodoro session completed");
      return;
    }
    
    // Calculate phase timing within the 60-second cycle
    unsigned long cycleTime = elapsed % PHASE_DURATION;
    
    // Determine current phase
    if (cycleTime < (PHASE_DURATION - TIMER_DISPLAY_DURATION - TASK_DISPLAY_DURATION)) {
      // Focus phase (40 seconds)
      if (displayPhase != 0) {
        displayPhase = 0;
        addLog("🎯 Switching to focus phase");
        showFocusFace();
      }
    } else if (cycleTime < (PHASE_DURATION - TASK_DISPLAY_DURATION)) {
      // Timer phase (10 seconds)
      if (displayPhase != 1) {
        displayPhase = 1;
        addLog("⏱️ Switching to timer phase");
        showTimerRemaining();
      } else {
        // Update timer display every second
        static unsigned long lastTimerUpdate = 0;
        if (currentTime - lastTimerUpdate >= 1000) {
          showTimerRemaining();
          lastTimerUpdate = currentTime;
        }
      }
    } else {
      // Task phase (10 seconds)
      if (displayPhase != 2) {
        displayPhase = 2;
        addLog("📝 Switching to task phase");
        showCurrentTask();
      }
    }
  }
  
  // Small delay to prevent excessive processing
  delay(10);
}

